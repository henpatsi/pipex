perror
	- takes custom message argument
	- prints custom message + error message based on errno
	- no return

strerror
	- takes errnum argument
	- returns string describing given errnum

access
	- takes filename and mode (R_OK, W_OK, X_OK)
	- returns 0 if access permitted, otherwise -1 and sets errno

dup
	- creates a copy of a fd

dup2
	- dup but allows specification of fd number
	- can replace other fd, e.g. stdin or stdout with your own fd

execve
	- executes program given as pathname
	- replaces current program (DOES NOT RETURN)
	- newly initialized stack and heap
	- takes argv, argv[0] is filename, argv[argc] is 0
	- envp ? null ?

fork
	- creates child process of current process
	- both processes execute simultaneously
	- child process uses same open files
	- returns neg on fail, 0 to child, new process ID to parent

pipe
	- a connection between two processes
	- standard output from one process becomes the standard input of the other process
	- one process write to the pipe, and the other process reads from the pipe
	- pipe can be used by the creating process, as well as all its child processes
	- if a process tries to read before something is written to the pipe,
	  the process is suspended until something is written

wait
	- parent process waits until child process exits

unlink, waitpid

functions used:

open
close
perror
wait
pipe
fork
free
malloc
dup2
